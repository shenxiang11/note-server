// This file is @generated by prost-build.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct BatchGetPublishedNotesRequest {
    #[prost(int64, repeated, tag = "1")]
    pub ids: ::prost::alloc::vec::Vec<i64>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct BatchGetPublishedNotesResponse {
    #[prost(message, repeated, tag = "1")]
    pub notes: ::prost::alloc::vec::Vec<GetPublishedNoteResponse>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetUserPublishedNotesRequest {
    #[prost(int64, tag = "1")]
    pub user_id: i64,
    #[prost(int64, tag = "2")]
    pub page_size: i64,
    #[prost(int64, optional, tag = "3")]
    pub cursor_id: ::core::option::Option<i64>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetUserPublishedNotesResponse {
    #[prost(message, repeated, tag = "1")]
    pub notes: ::prost::alloc::vec::Vec<GetPublishedNoteResponse>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetUserPublishedNoteIdsRequest {
    #[prost(int64, tag = "1")]
    pub user_id: i64,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetUserPublishedNoteIdsResponse {
    #[prost(int64, repeated, tag = "1")]
    pub ids: ::prost::alloc::vec::Vec<i64>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetPublishedNotesRequest {
    #[prost(int64, tag = "1")]
    pub page_size: i64,
    #[prost(int64, optional, tag = "2")]
    pub cursor: ::core::option::Option<i64>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetPublishedNotesResponse {
    #[prost(message, repeated, tag = "1")]
    pub notes: ::prost::alloc::vec::Vec<GetPublishedNoteResponse>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ImageList {
    #[prost(string, repeated, tag = "1")]
    pub images: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CreateOrUpdateRequest {
    #[prost(int64, tag = "1")]
    pub user_id: i64,
    #[prost(int64, optional, tag = "2")]
    pub id: ::core::option::Option<i64>,
    #[prost(string, optional, tag = "3")]
    pub title: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "4")]
    pub content: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(message, optional, tag = "5")]
    pub images: ::core::option::Option<ImageList>,
    #[prost(string, optional, tag = "6")]
    pub video: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(enumeration = "NoteStatus", optional, tag = "7")]
    pub status: ::core::option::Option<i32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct CreateOrUpdateResponse {}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetPublishedNoteRequest {
    #[prost(int64, tag = "1")]
    pub id: i64,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetPublishedNoteResponse {
    #[prost(oneof = "get_published_note_response::Note", tags = "1, 2")]
    pub note: ::core::option::Option<get_published_note_response::Note>,
}
/// Nested message and enum types in `GetPublishedNoteResponse`.
pub mod get_published_note_response {
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum Note {
        #[prost(message, tag = "1")]
        NormalNote(super::NormalNote),
        #[prost(message, tag = "2")]
        VideoNote(super::VideoNote),
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct NormalNote {
    #[prost(int64, tag = "1")]
    pub id: i64,
    #[prost(string, tag = "2")]
    pub title: ::prost::alloc::string::String,
    #[prost(string, tag = "3")]
    pub content: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "4")]
    pub images: ::core::option::Option<ImageList>,
    #[prost(enumeration = "NoteStatus", tag = "5")]
    pub status: i32,
    #[prost(int64, tag = "6")]
    pub user_id: i64,
    #[prost(message, optional, tag = "7")]
    pub created_at: ::core::option::Option<::prost_types::Timestamp>,
    #[prost(message, optional, tag = "8")]
    pub updated_at: ::core::option::Option<::prost_types::Timestamp>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct VideoNote {
    #[prost(int64, tag = "1")]
    pub id: i64,
    #[prost(string, tag = "2")]
    pub title: ::prost::alloc::string::String,
    #[prost(string, tag = "3")]
    pub content: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "4")]
    pub images: ::core::option::Option<ImageList>,
    #[prost(string, tag = "5")]
    pub video: ::prost::alloc::string::String,
    #[prost(enumeration = "NoteStatus", tag = "6")]
    pub status: i32,
    #[prost(int64, tag = "7")]
    pub user_id: i64,
    #[prost(message, optional, tag = "8")]
    pub created_at: ::core::option::Option<::prost_types::Timestamp>,
    #[prost(message, optional, tag = "9")]
    pub updated_at: ::core::option::Option<::prost_types::Timestamp>,
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum NoteStatus {
    Unknown = 0,
    Draft = 1,
    Published = 2,
}
impl NoteStatus {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::Unknown => "NOTE_STATUS_UNKNOWN",
            Self::Draft => "NOTE_STATUS_DRAFT",
            Self::Published => "NOTE_STATUS_PUBLISHED",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "NOTE_STATUS_UNKNOWN" => Some(Self::Unknown),
            "NOTE_STATUS_DRAFT" => Some(Self::Draft),
            "NOTE_STATUS_PUBLISHED" => Some(Self::Published),
            _ => None,
        }
    }
}
/// Generated client implementations.
pub mod note_service_client {
    #![allow(
        unused_variables,
        dead_code,
        missing_docs,
        clippy::wildcard_imports,
        clippy::let_unit_value,
    )]
    use tonic::codegen::*;
    use tonic::codegen::http::Uri;
    #[derive(Debug, Clone)]
    pub struct NoteServiceClient<T> {
        inner: tonic::client::Grpc<T>,
    }
    impl NoteServiceClient<tonic::transport::Channel> {
        /// Attempt to create a new client by connecting to a given endpoint.
        pub async fn connect<D>(dst: D) -> Result<Self, tonic::transport::Error>
        where
            D: TryInto<tonic::transport::Endpoint>,
            D::Error: Into<StdError>,
        {
            let conn = tonic::transport::Endpoint::new(dst)?.connect().await?;
            Ok(Self::new(conn))
        }
    }
    impl<T> NoteServiceClient<T>
    where
        T: tonic::client::GrpcService<tonic::body::BoxBody>,
        T::Error: Into<StdError>,
        T::ResponseBody: Body<Data = Bytes> + std::marker::Send + 'static,
        <T::ResponseBody as Body>::Error: Into<StdError> + std::marker::Send,
    {
        pub fn new(inner: T) -> Self {
            let inner = tonic::client::Grpc::new(inner);
            Self { inner }
        }
        pub fn with_origin(inner: T, origin: Uri) -> Self {
            let inner = tonic::client::Grpc::with_origin(inner, origin);
            Self { inner }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> NoteServiceClient<InterceptedService<T, F>>
        where
            F: tonic::service::Interceptor,
            T::ResponseBody: Default,
            T: tonic::codegen::Service<
                http::Request<tonic::body::BoxBody>,
                Response = http::Response<
                    <T as tonic::client::GrpcService<tonic::body::BoxBody>>::ResponseBody,
                >,
            >,
            <T as tonic::codegen::Service<
                http::Request<tonic::body::BoxBody>,
            >>::Error: Into<StdError> + std::marker::Send + std::marker::Sync,
        {
            NoteServiceClient::new(InterceptedService::new(inner, interceptor))
        }
        /// Compress requests with the given encoding.
        ///
        /// This requires the server to support it otherwise it might respond with an
        /// error.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.send_compressed(encoding);
            self
        }
        /// Enable decompressing responses.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.accept_compressed(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_decoding_message_size(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_encoding_message_size(limit);
            self
        }
        pub async fn create_or_update(
            &mut self,
            request: impl tonic::IntoRequest<super::CreateOrUpdateRequest>,
        ) -> std::result::Result<
            tonic::Response<super::CreateOrUpdateResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/note.NoteService/CreateOrUpdate",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("note.NoteService", "CreateOrUpdate"));
            self.inner.unary(req, path, codec).await
        }
        pub async fn get_published_note(
            &mut self,
            request: impl tonic::IntoRequest<super::GetPublishedNoteRequest>,
        ) -> std::result::Result<
            tonic::Response<super::GetPublishedNoteResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/note.NoteService/GetPublishedNote",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("note.NoteService", "GetPublishedNote"));
            self.inner.unary(req, path, codec).await
        }
        pub async fn get_published_notes(
            &mut self,
            request: impl tonic::IntoRequest<super::GetPublishedNotesRequest>,
        ) -> std::result::Result<
            tonic::Response<super::GetPublishedNotesResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/note.NoteService/GetPublishedNotes",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("note.NoteService", "GetPublishedNotes"));
            self.inner.unary(req, path, codec).await
        }
        pub async fn get_user_published_note_ids(
            &mut self,
            request: impl tonic::IntoRequest<super::GetUserPublishedNoteIdsRequest>,
        ) -> std::result::Result<
            tonic::Response<super::GetUserPublishedNoteIdsResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/note.NoteService/GetUserPublishedNoteIds",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("note.NoteService", "GetUserPublishedNoteIds"));
            self.inner.unary(req, path, codec).await
        }
        pub async fn get_user_published_notes(
            &mut self,
            request: impl tonic::IntoRequest<super::GetUserPublishedNotesRequest>,
        ) -> std::result::Result<
            tonic::Response<super::GetUserPublishedNotesResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/note.NoteService/GetUserPublishedNotes",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("note.NoteService", "GetUserPublishedNotes"));
            self.inner.unary(req, path, codec).await
        }
        pub async fn batch_get_published_notes(
            &mut self,
            request: impl tonic::IntoRequest<super::BatchGetPublishedNotesRequest>,
        ) -> std::result::Result<
            tonic::Response<super::BatchGetPublishedNotesResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/note.NoteService/BatchGetPublishedNotes",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("note.NoteService", "BatchGetPublishedNotes"));
            self.inner.unary(req, path, codec).await
        }
    }
}
/// Generated server implementations.
pub mod note_service_server {
    #![allow(
        unused_variables,
        dead_code,
        missing_docs,
        clippy::wildcard_imports,
        clippy::let_unit_value,
    )]
    use tonic::codegen::*;
    /// Generated trait containing gRPC methods that should be implemented for use with NoteServiceServer.
    #[async_trait]
    pub trait NoteService: std::marker::Send + std::marker::Sync + 'static {
        async fn create_or_update(
            &self,
            request: tonic::Request<super::CreateOrUpdateRequest>,
        ) -> std::result::Result<
            tonic::Response<super::CreateOrUpdateResponse>,
            tonic::Status,
        >;
        async fn get_published_note(
            &self,
            request: tonic::Request<super::GetPublishedNoteRequest>,
        ) -> std::result::Result<
            tonic::Response<super::GetPublishedNoteResponse>,
            tonic::Status,
        >;
        async fn get_published_notes(
            &self,
            request: tonic::Request<super::GetPublishedNotesRequest>,
        ) -> std::result::Result<
            tonic::Response<super::GetPublishedNotesResponse>,
            tonic::Status,
        >;
        async fn get_user_published_note_ids(
            &self,
            request: tonic::Request<super::GetUserPublishedNoteIdsRequest>,
        ) -> std::result::Result<
            tonic::Response<super::GetUserPublishedNoteIdsResponse>,
            tonic::Status,
        >;
        async fn get_user_published_notes(
            &self,
            request: tonic::Request<super::GetUserPublishedNotesRequest>,
        ) -> std::result::Result<
            tonic::Response<super::GetUserPublishedNotesResponse>,
            tonic::Status,
        >;
        async fn batch_get_published_notes(
            &self,
            request: tonic::Request<super::BatchGetPublishedNotesRequest>,
        ) -> std::result::Result<
            tonic::Response<super::BatchGetPublishedNotesResponse>,
            tonic::Status,
        >;
    }
    #[derive(Debug)]
    pub struct NoteServiceServer<T> {
        inner: Arc<T>,
        accept_compression_encodings: EnabledCompressionEncodings,
        send_compression_encodings: EnabledCompressionEncodings,
        max_decoding_message_size: Option<usize>,
        max_encoding_message_size: Option<usize>,
    }
    impl<T> NoteServiceServer<T> {
        pub fn new(inner: T) -> Self {
            Self::from_arc(Arc::new(inner))
        }
        pub fn from_arc(inner: Arc<T>) -> Self {
            Self {
                inner,
                accept_compression_encodings: Default::default(),
                send_compression_encodings: Default::default(),
                max_decoding_message_size: None,
                max_encoding_message_size: None,
            }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> InterceptedService<Self, F>
        where
            F: tonic::service::Interceptor,
        {
            InterceptedService::new(Self::new(inner), interceptor)
        }
        /// Enable decompressing requests with the given encoding.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.accept_compression_encodings.enable(encoding);
            self
        }
        /// Compress responses with the given encoding, if the client supports it.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.send_compression_encodings.enable(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.max_decoding_message_size = Some(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.max_encoding_message_size = Some(limit);
            self
        }
    }
    impl<T, B> tonic::codegen::Service<http::Request<B>> for NoteServiceServer<T>
    where
        T: NoteService,
        B: Body + std::marker::Send + 'static,
        B::Error: Into<StdError> + std::marker::Send + 'static,
    {
        type Response = http::Response<tonic::body::BoxBody>;
        type Error = std::convert::Infallible;
        type Future = BoxFuture<Self::Response, Self::Error>;
        fn poll_ready(
            &mut self,
            _cx: &mut Context<'_>,
        ) -> Poll<std::result::Result<(), Self::Error>> {
            Poll::Ready(Ok(()))
        }
        fn call(&mut self, req: http::Request<B>) -> Self::Future {
            match req.uri().path() {
                "/note.NoteService/CreateOrUpdate" => {
                    #[allow(non_camel_case_types)]
                    struct CreateOrUpdateSvc<T: NoteService>(pub Arc<T>);
                    impl<
                        T: NoteService,
                    > tonic::server::UnaryService<super::CreateOrUpdateRequest>
                    for CreateOrUpdateSvc<T> {
                        type Response = super::CreateOrUpdateResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::CreateOrUpdateRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as NoteService>::create_or_update(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = CreateOrUpdateSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/note.NoteService/GetPublishedNote" => {
                    #[allow(non_camel_case_types)]
                    struct GetPublishedNoteSvc<T: NoteService>(pub Arc<T>);
                    impl<
                        T: NoteService,
                    > tonic::server::UnaryService<super::GetPublishedNoteRequest>
                    for GetPublishedNoteSvc<T> {
                        type Response = super::GetPublishedNoteResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::GetPublishedNoteRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as NoteService>::get_published_note(&inner, request)
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = GetPublishedNoteSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/note.NoteService/GetPublishedNotes" => {
                    #[allow(non_camel_case_types)]
                    struct GetPublishedNotesSvc<T: NoteService>(pub Arc<T>);
                    impl<
                        T: NoteService,
                    > tonic::server::UnaryService<super::GetPublishedNotesRequest>
                    for GetPublishedNotesSvc<T> {
                        type Response = super::GetPublishedNotesResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::GetPublishedNotesRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as NoteService>::get_published_notes(&inner, request)
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = GetPublishedNotesSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/note.NoteService/GetUserPublishedNoteIds" => {
                    #[allow(non_camel_case_types)]
                    struct GetUserPublishedNoteIdsSvc<T: NoteService>(pub Arc<T>);
                    impl<
                        T: NoteService,
                    > tonic::server::UnaryService<super::GetUserPublishedNoteIdsRequest>
                    for GetUserPublishedNoteIdsSvc<T> {
                        type Response = super::GetUserPublishedNoteIdsResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<
                                super::GetUserPublishedNoteIdsRequest,
                            >,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as NoteService>::get_user_published_note_ids(
                                        &inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = GetUserPublishedNoteIdsSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/note.NoteService/GetUserPublishedNotes" => {
                    #[allow(non_camel_case_types)]
                    struct GetUserPublishedNotesSvc<T: NoteService>(pub Arc<T>);
                    impl<
                        T: NoteService,
                    > tonic::server::UnaryService<super::GetUserPublishedNotesRequest>
                    for GetUserPublishedNotesSvc<T> {
                        type Response = super::GetUserPublishedNotesResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::GetUserPublishedNotesRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as NoteService>::get_user_published_notes(
                                        &inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = GetUserPublishedNotesSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/note.NoteService/BatchGetPublishedNotes" => {
                    #[allow(non_camel_case_types)]
                    struct BatchGetPublishedNotesSvc<T: NoteService>(pub Arc<T>);
                    impl<
                        T: NoteService,
                    > tonic::server::UnaryService<super::BatchGetPublishedNotesRequest>
                    for BatchGetPublishedNotesSvc<T> {
                        type Response = super::BatchGetPublishedNotesResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::BatchGetPublishedNotesRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as NoteService>::batch_get_published_notes(
                                        &inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = BatchGetPublishedNotesSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                _ => {
                    Box::pin(async move {
                        let mut response = http::Response::new(empty_body());
                        let headers = response.headers_mut();
                        headers
                            .insert(
                                tonic::Status::GRPC_STATUS,
                                (tonic::Code::Unimplemented as i32).into(),
                            );
                        headers
                            .insert(
                                http::header::CONTENT_TYPE,
                                tonic::metadata::GRPC_CONTENT_TYPE,
                            );
                        Ok(response)
                    })
                }
            }
        }
    }
    impl<T> Clone for NoteServiceServer<T> {
        fn clone(&self) -> Self {
            let inner = self.inner.clone();
            Self {
                inner,
                accept_compression_encodings: self.accept_compression_encodings,
                send_compression_encodings: self.send_compression_encodings,
                max_decoding_message_size: self.max_decoding_message_size,
                max_encoding_message_size: self.max_encoding_message_size,
            }
        }
    }
    /// Generated gRPC service name
    pub const SERVICE_NAME: &str = "note.NoteService";
    impl<T> tonic::server::NamedService for NoteServiceServer<T> {
        const NAME: &'static str = SERVICE_NAME;
    }
}
